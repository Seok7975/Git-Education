3장
버전 가지고 놀기

3.1 버전 비교하기

1. 새로운 로컬 저장소 c:\git-test2에 만든다.
2. test.txt에 A를 적고 저장한다.
3. 이를 스테이지에 올리고 커밋하여 첫 번째 버전을 만든다. 커밋 메시지는 1로 한다.
4. 만들어진 첫 번째 버전을 History에서 확인한다.
5. 이제 두 번째 버전을 만든다. test.txt 파일에 A 다음 줄에 B를 적고 저장한다.
6. 이를 스테이지에 올리고, 커밋하여 두 번째 버전을 만든다. 커밋 메시지는 2로 하자.
7. 이번엔 세 번째 버전을 만들자. 이번에는 test.txt 파일에서 A를 삭제해 보자.
8. 이를 스테이지에 올리고, 커밋하여 세 번째 버전을 만들자. 커밋 메시지는 3으로 하자.
9. 이번에는 test.txt 파일 마지막 줄에 C를 적고 저장하자.
10. 이를 스테이지에 올리고, 커밋하여 네 번째 버전을 만들자. 커밋 메시지는 4로 하자.
11. 이제 마지막 버전을 만들어 보자. 이번에는 test.txt 파일의 C를 삭제하고, 저장하자.
12. 이를 스테이지에 올리고, 커밋하여 다섯 번째 버전을 만든다. 커밋 메시지는 5로 하자.

이 예제에서는 하나의 텍스트 파일 속 내용이 추가되고 삭제되는 과정만 표현했지만, 실제 개발 과정에서는
수많은 파일의 내용들이 추가되고 삭제된다. 그렇기에 여러분도 방금 실습한 예시를 '여러 파일 속 코드가
삭제되고 추가되는 과정'에 빗대어 생각해 보자.

1. 직전 버전과 비교하기
각각의 버전이 어떤 변경을 토대로 만들어졌는지, 다시 말해 이전 버전에 비해 무엇이 바뀌었는지는 소스트리의 History에서 확인할 수 있습니다.
첫 번째 버전을 클릭해 봅시다. 우측 하단의 초록색 + A는 A가 추가된 것을 나타낸다.
이번에는 세 번째 버전을 클릭해 봅시다. 붉은색 - A는 A가 삭제된 것을 나타낸다.
각 버전과 직전 버전의 차이를 비교하려면 이렇게 개별 커밋을 클릭하여 확인하면 된다.

2. 버전별 비교하기

그렇다면 버전별 비교는 어떻게 할까? 예를 들어 두 번째 커밋과 네 번째 커밋의 차이를 알고 싶다면 어떻게 해야 할까?
1. 우선 두 번째 커밋을 할 당시의 test.txt 파일을 확인해 보자. 두 번째 커밋을 클릭하고 test.txt 공란에 마우스 오른쪽 버튼을 클릭한 후 선택한 버전 열기를 클릭해 보자.
2. 그러면 두 번째 버전의 test.txt 파일의 내용을 확인할 수 있다.
3. 같은 방식으로 네 번째 버전의 내용도 확인할 수 있다.
두 번째 버전을 기준으로 생각했을 때 네 번째 버전은 A가 삭제되고, C가 추가되었다.
4. 자, 그러면 소스트리로 네 번째 버전이 두 번째 버전에 비해 무엇이 어떻게 달라졌는지 확인해 보자. 우선 두 번째 버전을 클릭하자.
5. Ctrl을 누른 상태에서 비교할 버전, 즉 네번째 버전을 클릭해 보자.
6. 비교할 파일 test.txt 파일을 선택하면 우측 하단에 두 번째 버전에 비해 네 번째 버전은 무엇이 달라졌는지가 나온다.

이번에는 첫 번째 버전과 네 번째 버전을 비교해 보자. 네 번째 버전은 첫 번째 버전에서 문자 A가 삭제됐고, B와 C가 추가됐다. 이를 소스트리를 이용해 직접 확인해 보자.

1. 첫 번째 버전을 클릭하고 Ctrl을 누른 상태에서 네 번째 버전을 클릭해 보자.
2. test.txt 파일을 클릭하면 첫 번째 버전과 네 번째 버전의 차이를 확인할 수 있다.

3.2 작업 되돌리기

1. 작업 디렉터리에서 변경 사항 생성하기
2. 스테이지로 올리기
3. 커밋하기

이때 아직 스테이지로 올리지 않은 변경된 파일을 취소하려면 어떻게 해야 할까? 스테이지에 올라간 파일은 어떻게 취소해야 할까? 이미 커밋한 파일은 어떻게 최소할 수 있을까?

1. 스테이지에 올라간 파일 되돌리기

우선 스테이지로 올라간 파일을 되돌리는 방법부터 알아보자. 앞 절에서 사용한 실습을 그대로 다시 사용하겠다.

1. test.txt 파일에 C를 추가하고, A가 적힌 test2.txt 파일을 추가로 만든 뒤 저장한다.
2. 스테이지에 올라가지 않은 파일의 test.txt, test2.txt를 모두 스테이지에 올려봅시다. 모두 스테이지에 올리기를 클릭합니다.
3. test.txt 파일을 클릭한 후 선택 내용 스테이지에서 내리기 또는 파일 이름 우측의 -를 클릭합니다.
4. test.txt 파일이 스테이지에서 내려간 것을 확인할 수 있다.
5. 같은 방법으로 test2.txt 파일도 스테이지에서 내리자.

//////////////////////////////////////////////////////////////////////
tip
'모두 스테이지에서 내리기'를 클릭하면 스테이지의 모든 내용이 내려간다.'
//////////////////////////////////////////////////////////////////////////

2. 스테이지에 올라가지 않은 파일 되돌리기

이번에는 스테이지에 올라가지 않은 파일을 되돌려 보자.
1. 파일 상태를 클릭한 후 스테이지에 올라가지 않은 파일을 확인해 보자. test.txt와 test2.txt 파일을 확인할 수 있다.
2. test.txt 파일에 마우스 오른쪽 버튼을 클릭한 후 '파일 변경사항 폐기'를 클릭한다.
////////////////////////////////////////////////////////////////////////////
tip
'파일 변경사항 폐기'는 변경 사항을 폐기하겠다는 의미이다.
////////////////////////////////////////////////////////////////////////////
3. '폐기하시겠습니까?"라는 창에 확인을 클릭한다.
4. 스테이지에 올라가지 않은 파일에 test.txt 파일이 사라진 것을 볼 수 있다. 스테이지에 올라오지 않은 변경 사항이 폐기된 것이다.
5. 실제로 test.txt 파일을 열어보면 이전에 추가한 C가 사라져 있음을 볼 수 있다. 즉, 변경 사항이 취소된 것이다.
6. 이번에는 test2.txt 파일에 마우스 오른쪽 버튼을 클릭해 보자. 방금 전과는 다르게 폐기를 누를 수 없다. 이는 test2.txt 파일이 이번에 막 생성된 파일이기 때문이다. 즉, '새롭게 만들어진 파일의 변경 사항을 취소한다'는 말은 곧 이 파일이 만들어지기 전으로 돌아가겠다, 다시 말해 '이 파일을 제거하겠다'는 말과 같다. 따라서 방금 생성한 파일의 작업을 되돌리려면 제거를 클릭해야 한다. 제거를 클릭해 보자.
7. '수정됐거나 선택되지 않은 파일을 지우시겠습니까?'라는 창에 확인을 클릭한다.
8. 그럼 test2.txt 파일이 제거된다. 파일 상태는 깔끔히 비워지고, 실제로도 test2.txt 파일이 삭제된 것을 확인할 수 있다.

3. 커밋 되돌리기
커밋한 내용을 되돌리는 방법에는 크게 두 가지가 있다. 바로 revert와 reset이다.

* revert
revert는 버전을 되돌리되, 되돌아간 상태에 대한 새로운 버전(커밋)을 만드는 방식이다. 중요한 점은 기존의 버전은 삭제되지 않는다는 점이다.
버전 다섯 개가 만들어진 상황에서, 다섯 번째 버전을 네 번째 버전으로 되돌리고 싶다고 가정해 보자.

다섯 번째 버전을 revert하면 네 번째 버전으로 되돌아간 새로운 여섯 번째 커밋이 만들어진다.

1. History를 클릭한다. 다섯 번째 버전을 네 번째 버전으로 revert하기 위해 다섯 번째 버전에 마우스 오른쪽 버튼을 클릭한다. 커밋 되돌리기 라는 항목을 클릭한다.
2. '정말 커밋을 되돌리시겠습니까?'라는 창이 나오면 예를 클릭합니다.
3. Revert 5라는 새로운 버전이 만들어진 것을 확인할 수 있다. 우측 하단을 보면 이 버전이 네 번째 버전의 결과와 동일한 내용을 담고 있다는 것 또한 알 수 있다.

* reset
revert는 버전으로 되돌리되, 되돌아간 상태에 대한 새로운 버전을 만드는 것이어서 이전까지의 버전을 삭제하지는 않는 방식이라고 했다.
이와는 달리 reset은 되돌아갈 버전의 시점으로 완전하게 되돌아가는 방식이다. 즉, 되돌아갈 버전 이후의 버전은 삭제되는 방식이다.

reset에는 크게 세 종류 soft, mixed, hard가 있다. 커밋은 다음과 같은 순서로 만들어진다고 했다.

1. 작업 디렉터리에서 변경 사항 생성하기
2. 스테이지로 올리기
3. 커밋하기

작업 디렉터리 내 변경 사항과 스테이지에 추가된 변경 사항은 유지하되, 커밋했다는 사실만 되돌리는 reset을 soft reset이라고 한다.
그리고 작업 디렉터리 내 변경 사항은 유지하되, 스테이지와 커밋을 되돌리는 reset을 mixed reset이라고 한다.
마지막으로 작업 디렉터리 내 변경 사항까지 통째로 되돌리는 reset을 hard reset이라고 한다.

reset의 종류

종류					내용
soft reset				커밋만 되돌리기
mixed reset				스테이지까지 되돌리기
hard reset				작업 디렉터리까지 되돌리기

앞에서 설명한 예시로 직접 실습해 보자.

1. 소스트리에서 두 번째 커밋으로 reset하려면 두 번째 커밋에 마우스 오른쪽 버튼을 클릭한 다음 이 커밋까지 현재 브랜치를 초기화를 클릭한다.
2. 어떻게 reset할지 선택하는 항목이 나온다. 작업 디렉터리 내 변경 사항까지 통째로 리셋하기 위해 Hard를 선택하고 확인을 클릭한다.
3. '경고' 창이 뜨면 예를 클릭한다.
4. 결과를 확인하면 두 번째 버전으로 reset된 것을 확인할 수 있다. hard reset 했기에 작업 디렉터리와 스테이지에 아무것도 남아 있지 않다. 다시 말해, 두 번째 버전 이후 내용들은 모두 삭제된 것이다.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Mixed 또는 Soft를 선택한다면?

앞 예시에서는 Hard를 선택하여 hard reset을 진행했다. 여기서 만일 Mixed 또는 Soft를 선택했다면 어떤 결과가 나올까? 우선 reset을 선택하는 상황에서 Mixed를 선택해 보자. mixed reset이 뭐라고 했나? 스테이지까지 되돌리는 reset이라고 했다.
커밋하지 않은 변경 사항이 있음을 확인할 수 있다. 이를 클릭한 뒤 하단을 보면 스테이지에 올라가지 않은 파일 항목에 test.txt 파일이 있는 것도 볼 수 있다. 즉, 커밋했다는 사실과 스테이지에 올렸다는 사실까지 되돌린, 변경사항을 생성한 상황만 남은 상태가 됐다.

그렇다면 Soft를 선택할 경우, 즉 soft reset의 결과는 어떻게 될까?

세 전째 버전을 만들기 위해 스테이지에 올린 파일까지 유지된다는 걸 알 수 있다. 다시 말해, soft reset은 커밋한 사실만 되돌릴 뿐, 변경 사항을 생성하고 스테이지에 올린 사실까지는 되돌리지 않는 방식임을 확인할 수 있다.

3.3 스태시로 작업 임시 저장하기
깃은 스태시(stash)라는 임시 저장 기능을 지원한다. 임시 저장 기능은 언제, 어떤 상황에서 사용하게 될까?

여러분이 개발하는 과정에서 여러분의 작업 내역이 썩 마음에 들지 않지만 버리기는 아까울 때가 있을 수 있다.
또는 갑자기 다른 더 중요한 일을 처리해야 할 때가 있을 수 있다.
이런 상황에서는 지금까지의 변경 내역을 전부 지워버리는 것보다 어딘가에 임시 저장해두는 것이 좋을 것이다. 스태시를 하게 되면 작업 디렉터리에서 생성한 모든 변경 사항이 임시 저장되고, 작업 디렉터리는 변경 사항이 생기기 전의 깨끗한 상태로 돌아간다.
서로 다른 변경 사항 여러 개를 임시 저장할 수도 있다.
스태시로 임시 저장된 변경 사항들은 언제든 다시 꺼내어 작업 디렉터리에 다시 적용할 수 있다.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
스태시를 사용할 수 있는 파일

스태시는 깃이 변경 사항을 추적하는(tracked) 파일에만 사용할 수 있다. 다시 말해, 스테이지에 이미 올라와 있거나 한 번이라도 커밋한 적이 있는 파일에만 사용할 수 있다. 방금 막 생성한 파일처럼 깃이 기존에 변경 사항을 추적하지 않은(untracked) 파일에는 스태시를 사용할 수 없다.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

자, 이를 실습해 보자.

1. c:\git-test3 로컬 저장소를 만들고 거기에 a.txt, b.txt, c.txt, d.txt, e.txt 파일을 만들고 이 다섯 개의 텍스트 파일에 각각 A, B, C, D, E를 저장하자.
2. 이들을 스테이지에 모두 올리고 커밋하자. 커밋 메시지는 1로 하자.
3. 이제 변경 사항을 만들자. a.txt 파일 안에 B를 추가하고, b.txt 파일은 삭제한다. 그리고 c.txt 파일 안에 D를 추가한다.
4. 그런 다음 소스트리의 파일상태를 클릭해보자.
5. 여기까지의 작업 내역을 임시 저장해 보자. 상단의 스태시를 클릭한다. '변경점을 Stash하겠습니까?'라는 물음에 대해 '임시저장 1'을 입력합니다. 스테이지에 있는 변경사항 유지 항목은 체크하지 않고 확인을 클릭한다.
6. 작업 디렉터리에 남아 있던 작업 내역은 깨끗하게 사라진다. 대신 좌측에 스태시 항목을 보면 임시저장 1이 새롭게 생성된 것을 확인할 수 있다.
7. 실제로 확인해봐도 삭제했던 b.txt 파일이 복원됐고, a.txt와 c.txt 파일을 수정했던 흔적이 사라진 것을 알 수 있다.
8. 그럼 다른 변경 사항을 만들어 보자. 이번에는 d.txt 파일과 e.txt 파일을 삭제해 보자.
9. 이 두 개의 파일을 삭제한 변경 사항을 또 다시 임시 저장해 보자. 상단의 스태시를 클릭한다.
10. 스태시 메시지에는 '임시저장 2'를 적고, 확인을 누른다.
11. 그럼 작업 디렉터리의 변경 사항은 또 다시 아무 일도 없었다는 듯이 깨끗이 비워진다. 좌측에 스태시 항목을 보면' 임시저장 2'가 생성된 것 또한 확인할 수 있다. 이렇게 스태시를 이용해 여러 변경 사항을 임시 저장할 수 있다.
12. 그럼 이제 임시 저장된 변경 사항을 작업 디렉터리에 다시 적용해 보자. 가령 '임시저장 1'을 다시 반영해 보자. 좌측의 임시저장 1을 클릭해 보자. 그러면 '임시저장 1'이 어떤 변경 사항을 담고 있는지가 나온다.
13. 이 변경 사항을 다시 작업 디렉터리에 반영하려면 좌측 스태시의 임시저장 1에서 마우스 오른쪽 버튼을 클릭하고 스태시 적용을 클릭해야 한다.
14. '스태시를 적용하시겠습니까?'라는 물음에 확인을 누른다. 적용 후 삭제는 체크하지 않는다.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
TIP
'적용 후 삭제'를 체크한 뒤 '확인'을 누르면 임시저장 1의 변경 사항이 작업 디렉터리에 적용되며, 스태시 항목의 임시저장 1은 삭제된다.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

15. 파일 상태를 클릭해보면 앞에서 임시 저장한 변경 사항들이 다시 적용된 걸 알 수 있다.
이렇게 스태시를 이용해 여러 작업 내역을 임시로 저장할 수 있고, 복원할 수도 있다.
