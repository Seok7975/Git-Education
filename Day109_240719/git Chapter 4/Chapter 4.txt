4장 브랜치로 나누어 관리하기

4.1 버전을 나누어 관리하는 이유
브랜치(branch)는 영어로 나뭇가지를 의미합니다. 나무를 자세히 보면 한 줄기에서 가지들이 여러 갈래로 뻗어나오고, 또 그 가지에서 여러 가지들이 뻗어나온다는 걸 알 수 있습니다.
브랜치는 마치 줄기에서 뻗어나오는 나뭇가지와 같이 버전을 여러 흐름으로 나누어 관리하는 방법입니다.

1. 브랜치가 없다면?

A와 B가 협업하여 온라인 쇼핑몰을 만들고 있다고 가정해보자. 쇼핑몰은 어느 정도 완성된 상태로 코드는 방대하고 커밋이 꽤 쌓여 있는 상황이다. A와 B는 여기에 몇 가지 기능을 추가하고자 한다. A는 장바구니 기능을, B는 주문 목록 기능을 구현하기로 했다.
A와 B는 이미 어느 정도 만들어진 쇼핑몰 코드를 통째로 복사하여 각각 장바구니 기능, 주문 목록 기능을 만들 것이다. 이 과정에서 여러 파일을 추가하고 수정하고 삭제하게 될 것이다.
A와 B가 작업을 모두 완료했다면 A와 B는 각자의 작업을 하나로 합칠 것이다. 이때 어쩔 수 없이 A와 B는 각자가 추가하고 수정하고 삭제한 코드를 하나하나 대조해봐야 한다.
A와 B가 작업한 내용 중에는 서로의 작업과 전혀 관련 없는 부분도 있을 것이고, 때로는 같은 코드를 다르게 수정한 부분도 있을 것이다. 이를 일일이 대조하고 합칠 코드를 판단한다면 너무나 번거로울 것이다. 게다가 서로의 작업을 합치는 과정에서 실수할 수도 있다.

이번에는 다른 상황도 생각해 보자. C회사는 자체 제작한 프로그램을 여러 회사에 납품했다. 그리고 C 회사의 프로그램을 사용하는 회사들은 C 회사에 각자의 요구 사항을 전달했다. 어떤 회사는 프로그램이 자신들의 회사에 맞게 조금 변경했으면 좋겠다고 요구했고, 어떤 회사는 프로그램에 추가 기능이 있었으면 좋겠다고 요구했고, 어떤 회사는 C 회사에게 이 기능은 필요하지 않으니 빼달라고 요구했다.
이런 상황에서 C 회사는 어떻게 해야 할까? 각 회사의 요구 사항의 수만큼 프로그램 코드를 복사하고, 요구 사항에 맞게 복사된 코드를 수정해야 한다.

시간이 흘러 C 회사의 프로그램은 어느덧 버전 10.0.0까지 출시됐고, 요구 사항이 1,000개가 넘어갈 정도로 매우 많아졌다고 가정해 보자.
C 회사는 이미 버전 10.0.0까지 출시했는데, 요구 사항 1,000개가 모두 같은 버전에서만 등장하지는 않을 것이다. 1,000개 중 어떤 요구 사항은 버전 1.0.0에 대한 요구 사항일 수 있고, 어떤 유구 사항은 버전 3.0.0에 대한 요구 사항일 수 있고, 어떤 요구 사항은 버전 9.0.0에 대한 요구 사항일 수 있겠다.
그렇다면 C 회사는 어떻게 해야 할까? 버전별로 복사본을 만들고, 요구 사항별로 복사본을 만들어 각 요구 사항에 맞게 소프트웨어를 수정해야 할까?
버전 1.0.0에 대한 요구 사항은 30개니 코드를 30개 복사하고, 버전 1.0.5에 대한 요구 사항은 15개니 코드를 15개 복사하고 ... 이렇게 코드를 관리해야 할까?
말만 들어도 알 수 있듯, 이는 매우 번거롭고 현명하지 못한 방식이다.

2. 브랜치로 해결하기

앞 두 사례의 문제는 모두 브랜치로 해결할 수 있다 브랜치는 버전의 분기이다. 작업을 분기하고 싶을 때 브랜치를 나누면 된다.
브랜치는 버전을 여러 흐름으로 나누어 관리하는 방법이라고 했다. 여러 흐름으로 버전을 나누어 관리한다는 말으, 쉽게 말해 다음 3단계로 버전을 관리하는 것을 의미한다.

1. 브랜치를 나눈다.
2. 각자의 브랜치에서 작업한다.
3. (필요한 경우) 나눈 브랜치를 합친다.

첫 번째 사례에서 브랜치를 어떻게 활용할 수 있는지 알아보자. A와 B는 어느 정도 완성된 쇼핑몰에서 코드를 통째로 복사하지 않고 각자의 브랜치를 나눈다. A는 쇼핑몰 코드에서 '장바구니'라는 이름의 브랜치를 나누었고, B는 '주문 목록'이라는 이름의 브랜치를 나누었다고 해보자.
이제 A와 B는 나누어진 각자의 브랜치에서만 작업하면 된다. A는 장바구니 브랜치에서 장바구니 기능을 만들고, B는 주문 목록 브랜치에서 주문 목록 기능을 만들면 된다.
각자의 작업이 끝나면 A와 B의 브랜치를 하나로 합친다. 그러면 A의 작업과 B의 작업은 자동으로 하나로 통합된다. 브랜치가 하나로 통합되면 쇼핑몰 코드는 장바구니 브랜치에서 A가 작업한 내용과 주문 목록 브랜치에서 B가 작업한 내용을 모두 포함하게 된다. 이때 A와 B는 '같은 코드를 다르게 수정한 부분'만 살펴보면 된다.

두 번째 사례에서 브랜치를 사용하는 예도 살펴보자. C 회사는 프로그램을 계속해서 개발하며 릴리스할 것이다. 이 과정에서 새로운 요구 사항이 생긴다면 그에 맞는 브랜치를 생성하고, 그렇게 나누어진 브랜치에 요구 사항을 반영하면 된다. 버전별로 요구 사항이 아무리 많아져도 브랜치를 나누면 그만이니 코드를 통째로 복사할 필요는 없을 것이다.

4.2 브랜치를 나누고, 합쳐보기
1. 브랜치 나누기

깃이 제공하는 가장 기본적인, 최초의 브랜치를 master 브랜치라고 한다. 지금까지 여러분이 만든 커밋은 모두 master 브랜치에 속한다.

HEAD는 기본적으로 현재 작업 중인 브랜치의 최신 커밋을 가리키는 일종의 표시이다. 보통은 현재 작업 중인 브랜치의 최신 커밋을 가리키지만, 브랜치를 나누고 합치는 과정에서 HEAD의 위치를 자유자재로 바꿀 수 있다.
체크아웃이란 특정 브랜치에서 작업할 수 있도록 작업 환경을 바꾼는 것을 의미한다. 특정 브랜치로 체크아웃하게 되면 HEAD의 위치가 해당 브랜치의 최신 커밋을 가리키고, 작업 디렉터리는 체크아웃한 브랜치의 모습으로 바뀌게 된다.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
브랜치 이름을 마음대로 지어도 되나?
깃을 연습할 때는 브랜치 이름을 임의로 지어도 무방하나, 실무에서는 브랜치 이름을 암묵적으로 정해두는 경우가 많다. 브랜치 이름을 마구잡이로 지으면 이 브랜치가 무엇을 위해 만들어졌는지 알 수가 없기 때문이다.
예를 들어 다음처럼 '새로운 기능을 개발하기 위한 브랜치' 이름은 'feature/<새 기능>', '릴리스를 준비하기 위한 브랜치' 이름은 release/<릴리스 번호>', 급하게 수정해야 하기위한 브랜치' 이름은 'hotfix/<수정 사항>' 이렇게 명명할 수 있다.
이렇게 목적에 따라 브랜치 이름을 관리하면 브랜치 이름만 봐도 이 브랜치가 왜 뻗어나왔는지, 무엇을 위해 만들어진 브랜치인지 알 수 있을 것이다.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

자, 그럼 소스트리를 이용해 브랜치를 직접 실습해 보자.

1. C:\git-test4 에 로컬 저장소를 만든다. 그리고 A가 적힌 a.txt 파일을 만들고 커밋한다. 커밋 메시지는 1로 하자.
2. 이번엔 b.txt 파일을 만들고 B를 적은 후 커밋한다. 커밋 메시지는 2로 하자.
3. 마지막으로 c.txt 파일을 만들고 C를 적은 후 커밋한다. 커밋 메시지는 3으로 한다.
4. 이렇게 세 개의 커밋을 만들었다. 여기서 foo라는 브랜치를 만들어보자. 상단의 브랜치를 클릭한다.
5. 새 브랜치에 새로 만들 브랜치 이름 foo를 작성한 후 새 브랜치 체크아웃에 체크되어 있는지 확인한다. 체크되어 있지 않다면 체크한다. 그리고 브랜치생성을 클릭한다.
앞서 체크아웃이란 해당 브랜치로 작업 환경을 바꾸겠다는 것을 의미한다고 했다. 즉, 'master 브랜치로 체크아웃한다'라는 말은 작업 환경을 master 브랜치로 바꾼다는 의미이고, 'foo 브랜치로 체크아웃한다'라는 말은 작업 환경을 foo 브랜치로 바꾼다는 의미이다.
6. 브랜치생성을 클릭하면 foo 브랜치가 생성된다. 이는 좌측의 브랜치에서 확인할 수 있다. 굵게 표기된 브랜치 이름은 현재 체크아웃된 브랜치를 나타낸다. 
7. 이제 foo_d.txt 파일을 만들고 D를 적은 후 커밋한다. 커밋 메시지는 4로 하자. 이 커밋은 master 브랜치가 아닌 foo 브랜치에 추가된다. 현재 작업 환경(체크아웃된 브랜치)이 foo 브랜치이기 때문이다.
8. 커밋을 하나만 더 추가해 보자. foo_e.txt 파일을 만들고 E를 적은 후 커밋한다. 커밋 메시지는 5로 하자.
9. 이렇게 master 브랜치에는 커밋 세 개가 쌓여 있고, 그로부터 파생된 foo 브랜치에는 커밋 다섯 개가 쌓여 있다. 현재는 foo 브랜치에 체크아웃되어 있을 텐데, 탐색기를 열어 파일이 다섯 개 있는지 확인해 보자.
10. master 브랜치로 체크아웃해 보자. 좌측의 브랜치에서 master를 더블클릭하면 master 브랜치로 체크아웃된다.
11. master 브랜치에는 커밋 세 개가 쌓여 있다.탐색기를 열어 파일이 세 개 있는지 확인해 보자. 방금 전까지만 해도 파일이 다섯 개 있었는데 갑자기 세 개가 됐다. 이는 작업 환경이 master 브랜치로 변경됐기 때문이다.
12. 자, 그러면 master 브랜치에 체크아웃되어 있는 상태에서 bar라는 새로운 브랜치를 만들어 보자. 방법은 앞에서 foo 브랜치를 만들 때와 동일하다.
13. bar 브랜치로 체크아웃한 상황에서 bar_d.txt 파일을 만들고 D를 적은 후 커밋한다. 커밋 메시지는 4로 한다. 그렇다면 이 커밋은 bar 브랜치에 추가된다.
14. 다시 bar 브랜치에서 bar_e.txt 파일을 만들고 E를 적은 후 커밋한다. 커밋 메시지는 5로 한다.
15. 마지막으로 커밋을 하나만 더 만들어 보자. bar_f.txt 파일을 만들고 F를 적은 후 커밋한다. 커밋 메시지는 6으로 한다.
16. 이렇게 브랜치를 이용해 세 개의 흐름으로 버전을 관리해 보았다.

2. 브랜치 병합하기

브랜치를 하나로 통합하는 것을 병합, 영어로 merge라고 한다.

1. foo 브랜치를 master 브랜치로 병합해 보자. 먼저 master 브랜치로 병합하려면 master 브랜치로 체크아웃해야 한다.
2. foo 브랜치에서 마우스 오른쪽 버튼을 클릭해 보자. 현재 브랜치로 foo 병합이 있다. '현재 브랜치'는 현재 체크아웃한 브랜치, 즉 master 브랜치를 말한다. master 브랜치로foo 브랜치를 병합해야 하니 이를 클릭한다.
3. '병합 확정' 창이 뜨면 확인을 클릭한다. 이때 fast-forward가 가능해도 새 커밋으로 생성 항목은 체크하지 않는다.
4. foo 브랜치가 master 브랜치로 병합된다. master 브랜치는 foo 브랜치와 같아졌다.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
빨리 감기 병합
foo 브랜치를 master 브랜치로 병합한 결과를 다시 보자.

master 브랜치 입장에서는 자신의 브랜치가 마치 빨리 감기 하듯이 foo 브랜치와 동일하게 업데이트됐다. 이처럼 master 브랜치가 빨리 감기 하듯 foo와 동일해질 수 있었던 이유는, foo 브랜치가 master 브랜치에서부터 뻗어나온 시점부터 병합되는 순간까지 master 브랜치에 어떤 변화도 없었기 때문이다. 다시 말해, foo 브랜치는 master 브랜치에서 뻗어나온 이후로 여러 커밋이 쌓였지만, 그동안 master 브랜치는 어떤 새로운 커밋도 없이 그저 가만히 있었다.
그렇기 때문에 foo 브랜치를 master 브랜치로 병합할 적에 master 브랜치는 그저 foo 브랜치에 새롭게 쌓인 커밋을 반영만 하면 된다.
이처럼 변화가 없었던 브랜치가 마치 빨리 감기 하듯 업데이트되는 병합 기법을 빨리 감기 병합(fast-forward merge)이라고 한다.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

5. 브랜치를 병합하고 나서 더 이상 브랜치에 남은 작업이 없다면 해당 브랜치를 삭제하는 것이 좋다. 가령 foo 브랜치를 master 브랜치와 병합한 뒤 foo 브랜치에서 더는 작업하지 않을 예정이라면 병합 후 foo 브랜치를 삭제하는 것이 좋다.
foo 브랜치를 삭제해 보자. master 브랜치에 체크아웃되어 있는 상태로 foo 브랜치에서 마우스 오른쪽 버튼을 클릭한 후 foo 삭제를 클릭해 보자.
/////////////////////////////////////////////////////////////////////////////////////////////
tip
브랜치를 삭제하려면 삭제하려는 브랜치가 아닌 다른 브랜치에 체크아웃되어 있어야 한다. 즉, foo 브랜치를 삭제하려면 foo 브랜치가 아닌 master 브랜치 또는 bar 브랜치로 체크아웃되어 있어야 한다.
////////////////////////////////////////////////////////////////////////////////////////////////

6. '브랜치 삭제' 창이 뜨면 확인을 클릭한다. 강제 삭제 항목은 체크하지 않는다.
///////////////////////////////////////////////////////////////////////////////////////////////
tip
참고로 상단의 '브랜치'에서도 브랜치를 삭제할 수도 있다. '브랜치 삭제'에서 삭제하려는 브랜치를 선택한 뒤 '브랜치 삭제'를 누르면 해당 브랜치는 삭제된다.
///////////////////////////////////////////////////////////////////////////////////////////////
7. foo 브랜치가 삭제된 결과를 확인하자.

이번에는 다른 방식으로 bar 브랜치를 병합해 보자. 상단의 병합에서도 브랜치를 병합할 수 있다. 이 또한 어렵지 않으니 차근차근 따라 해보자.

1. master 브랜치로 체크아웃한 뒤 상단의 병합을 클릭해 보자.
2. 여기서 master 브랜치에 병합할 브랜치의 커밋을 클릭한 뒤 확인을 누르면 해당 커밋이 병합된다. 가령 bar 브랜치의 4번 커밋을 master 브랜치로 병합하려면 4번 커밋을 클릭한 뒤 확인을 클릭하면 된다.
3. 그러면 master 브랜치에 bar 브랜치 4번 커밋이 병합된다. 그래프가 조금 복잡하다. Merge commit '<commit 해시>' into master라는 새로운 커밋이 생성됐다는 것을 볼 수 있다.
빨리 감기 병합이 아닌 병합, 다시 말해 bar 브랜치에는 없는 커밋이 master 브랜치에 있고 master 브랜치에는 없는 커밋이 bar 브랜치에 있는 상태에서 두 브랜치를 병합할 때는 이렇듯 새로운 커밋이 생성된다.
4. 탐색기에서 현재 파일 상태를 확인해 보자. bar 브랜치의 네 번째 커밋이었떤 bar_d.txt 파일이 master 브랜치에 생성되었다.
5. 이번에는 bar 브랜치의 5번 커밋과 6번 커밋을 master 브랜치로 한 번에 병합해 보자. 병합을 누른 후에 bar 브랜치의 6번 커밋을 클릭한 뒤 확인을 클릭한다.
6. 병합한 결과는 다음과 같다. 이번에도 Merge branch 'bar' into master라는 새로운 커밋이 생성됐다.

탐색기에서 master 브랜치의 파일 상태를 확인해보면 foo 브랜치에서 생성했던 파일들과 bar 브랜치에서 생성했던 파일들이 모두 잘 추가되어 있는 걸 알 수 있다.

4.3 충돌 해결하기

브랜치를 병합하는 과정은 생각보다 순탄치 않을 수 있습니다. 앞에서는 브랜치가 한 번에 성공적으로 합쳐졌지만 그렇지 못한 상황, 즉 충돌이 발생하는 경우도 있기 때문이다. 충돌이란 병합하려는 두 브랜치가 서로 같은 내용을 다르게 수정한 상황을 의미한다. 충돌이 발생하면 브랜치가 한 번에 병합되지 못한다. 충돌은 여럿이 협업하여 개발할 때 빈번히 발생하므로 언제 발생하고, 어떻게 해결할 수 있는지 꼭 알아야 합니다.

가령 master 브랜치에서 foo 브랜치가 뻗어나왔다고 합시다. master 브랜치는 a.txt 파일의 첫 번째 줄을 B로 수정한 다음 커밋했고, foo 브랜치는 a.txt 파일의 첫 번째 줄을 C로 수정한 다음 커밋했습니다.
이런 상황에서 foo 브랜치를 master 브랜치에 병합한다면 a.txt 파일에는 어떤 내용을 저장해야 할까요? master 브랜치를 따라 B라고 저장해야 할까요? 아니면 foo 브랜치를 따라 C라고 저장해야 할까요?
답은 깃도 모른다입니다. 이런 상황에서 깃은 어떤 브랜치의 내용을 반영해야 할지 판단할 수 없습니다. 이처럼 같은 내용을 다르게 수정한 두 브랜치를 병합하는 상황을 충돌이 발생했다고 합니다.
충돌이 발생하면 최종적으로 어떤 브랜치의 내용을 반영할지 여러분이 직접 선택해야 합니다. 충돌을 직접 발생시키고 이를 해결하는 과정을 실습해 보겠습니다.

1. 브랜치 충돌시키기

1. c:\git-test5 로컬 저장소를 만들고 master 브랜치에 A가 저장된 a.txt 파일을 만든 뒤 이를 커밋합니다. 커밋 메시지는 first로 하겠습니다.
2. 새로운 브랜치를 생성합니다. 브랜치 이름은 foo로 하겠습니다.
3. 생성한 foo 브랜치로 체크아웃합니다. a.txt 파일에 적힌 A를 foo로 변경한 뒤 커밋합니다. 커밋 메시지는 foo로 하겠습니다.
4. master 브랜치로 체크아웃합니다. a.txt 파일에 적힌 A를 master로 변경한 뒤 커밋합니다. 커밋 메시지는 master로 하겠습니다.
5. 자, 현재 foo 브랜치와 master 브랜치는 같은 내용을 다르게 수정한 상태입니다. foo 브랜치는 a.txt 파일을 foo로 변경한 뒤 커밋했고, master 브랜치는 a.txt 파일을 master로 변경한 뒤 커밋했죠. 이 상태에서 두 브랜치를 병합하면 충돌이 발생합니다. master 브랜치로 foo 브랜치를 병합해 볼까요?

master 브랜치로 체크아웃한 상태로 foo 브랜치에서 마우스 오른쪽 버튼을 클릭한 후 현재 브랜치로 foo 병합을 클릭합니다.
6. '병합 확정' 창에서 확인을 클릭합니다.
7. 바로 병합되지 않고 '충돌 병합' 창이 뜹니다. 충돌이 발생했으니 이 충돌을 해결하라는 의미지요. 닫기를 클릭합니다.
8. 충돌이 발생하면 다음과 같이 커밋하지 않은 변경사항이 생기고, 스테이지에 올라가지 않은 파일과 스테이지에 올라간 파일 항목에는 충돌이 발생한 파일이 추가됩니다.

2. 충돌 해결하기

브랜치를 병합하는 과정에서 충돌이 발생했을 경우, 충돌이 발생한 파일들의 충돌을 해결한 뒤 다시 커밋해야만 브랜치가 올바르게 병합됩니다.
이때 충돌을 해결한다는 말은 무슨 뜻일까요? 간단합니다. 충돌이 발생한 이유는 병합하려는 두 브랜치가 같은 내용을 서로 다르게 수정했기 때문입니다. 따라서 충돌이 발생하면 충돌이 발생한 두 브랜치 중 어떤 브랜치의 내용을 병합 결과에 반영할지를 여러분이 직접 선택해야 합니다. 이렇게 같은 내용을 다르게 수정한 브랜치 중 어떤 브랜치 내용을 최종적으로 반영할지를 직접 선택하는 것을 '충돌을 해결한다'고 합니다.

스테이지에 올라가지 않은 파일 속 a.txt 파일을 클릭해 보세요. 우측 하단을 보면 a.txt 파일이 갑자기 이상하게 수정되어 있죠? 전혀 당황할 필요가 없습니다. 앞으로 여러분이 깃으로 버전을 관리하며 자주 보게 될 화면이니까요?
이 기호는 일종의 영역 표기입니다. ======= 기호를 기준으로 윗부분은 HEAD가 가리키는 브랜치, 즉 현재 체크아웃한 브랜치의 내용이 적혀 있고, 아랫부분은 병합하려는 브랜치, 즉 foo 브랜치의 내용이 적혀 있습니다.

이는 <<<<<< 기호와 ========= 기호 사이의 내용을 선택할지, ========= 기호와 >>>>>>>> 기호 사이의 내용을 선택할지 고르라는 표기입니다. 여러분은 이 두 영역 중 반영할 부분을 직접 선택해 충돌을 해결해야 합니다.

그럼 master(HEAD) 브랜치의 내용과 foo 브랜치의 내용 중 어떤 내용을 병합에 반영할까요? 이번 실습에서는 master 브랜치의 내용을 반영하겠습니다.

1. 충돌이 방샐한 파일, 즉 스테이지에 올라가지 않은 파일 항목에 있는 a.txt 파일에서 마우스 오른쪽 버튼을 클릭합니다. 충돌 해결을 클릭하면 '내것'을 이용해 해결 항목과 '저장소' 것을 사용하여 해결 항목이 있습니다. 전자는 현재 체크아웃된 브랜치(HEAD, master 브랜치)의 내용을 병합에 반영하겠다는 의미이고, 후자는 병합하려는 브랜치(foo 브랜치)의 내용을 병합에 반영하겠다는 의미입니다.
이번 실습에서는 master 브랜치를 병합 결과로 반영할 예정이므로 '내것'을 이용해 해결을 클릭하겠습니다.
///////////////////////////////////////////////////////////////////////
tip
foo 브랜치의 내용을 병합 결과로 반영하고 싶다면 '저장소' 것을 사용하여 해결'을 클릭하면 됩니다.
////////////////////////////////////////////////////////////////////

2. '한쪽을 사용해서 충돌 해결하시겠습니까?' 창에 다음과 같은 메시지가 나옵니다. 이 메시지를 잘 보면 커밋 해시가 적혀 있습니다. 333a6ta3... 이 해시는 어떤 커밋의 해시죠? master 브랜치의 최신 커밋 해시입니다. 즉, 이 메시지는 '충돌이 발생한 a.txt 파일에 master 브랜치의 최신 커밋 내용을 반영하겠다'는 의미입니다. 확인을 누릅니다.
3. 그러면 충돌이 발생한 파일을 담고 있던 커밋하지 않은 변경사항이 사라집니다. 충돌이 해결된 것이지요.
4. 충돌을 해결했다고 해서 브랜치 병합이 끝난 것이 아닙니다. 브랜치 병합을 끝내려면 충돌을 해결한 뒤 다시 커밋해야 합니다. 파일 상태로 들어가 봅시다. 커밋 메시지가 자동으로 기입되어 있고, 커밋이 활성화되어 있습니다. 커밋을 클릭해 보세요.
5. 그러면 History에서 충돌이 발생했던 foo 브랜치가 성공적으로 병합된 것을 확인할 수 있습니다. a.txt 파일 내용도 master 브랜치의 내용으로 업데이트됐지요.

정리해 보겠습니다. 같은 내용을 다르게 수정한 브랜치를 병합하면 충돌이 발생합니다. 충돌이 발생하면 =================== 기호를 기준으로 나누어진 <<<<<<<<<<<<<<<< 기호와 >>>>>>>>>>>>> 기호 사이의 코드 중 무엇을 반영할지 선택합니다. 그런 다음 다시 커밋하면 성공적으로 병합할 수 있습니다.

///////////////////////////////////////////////////////////////////////////
tip
충돌이 발생했을 때 대처법
1. 충돌을 해결한다(어떤 브랜치의 내용을 반영할 지 직접 선택한다).
2. 다시 커밋한다.

4.4 브랜치 재배치하기
브랜치의 재배치는 rebase라고 합니다.

1. c:\git-test6에 로컬 저장소를 만든다. master 브랜치에 A가 저장된 a.txt 파일을 만들어 이를 첫 번째 커밋으로 만들고, B가 저장된 b.txt 파일을 만들어 이를 두 번째 커밋으로 만듭니다. 커밋 메시지는 각각 1과 2로 하겠습니다.
2. 여기서 foo라는 새로운 브랜치를 만든 뒤 체크아웃합니다.
3. foo 브랜치에는 C가 저장된 foo_c.txt 파일을 만들어 이를 세 번째 커밋으로 만들고, D가 저장된 foo_d.txt 파일을 만들어 이를 네 번째 커밋으로 만듭니다. 커밋 메시지는 각각 3과 4로 하겠습니다.
4. master 브랜치로 체크아웃합니다. C가 저장된 c.txt 파일을 만들어 이를 master 브랜치의 세 번째 커밋으로 만들고, D가 저장된 d.txt 파일을 만들어 이를 네 번째 커밋으로 만듭니다. 커밋 메시지는 각각 3, 4로 하겠습니다.
5. 이제 foo 브랜치를 재배치 하겠습니다. 브랜치를 재배치하려면 재배치하려는 브랜치로 체크아웃해야 합니다. foo 브랜치로 체크아웃합니다.
6. 재배치하려는 브랜치의 커밋에 마우스 오른쪽 버튼을 클릭합니다. master 브랜치의 4번 커밋으로 브랜치를 재배치할 예정이므로 master의 네 번째 커밋에서 마우스 오른쪽 버튼을 클릭후 재배치를 클릭합니다.
7. '재배치 확인' 창에서 확인을 클릭합니다.
8. 그러면 foo 브랜치가 master 브랜치의 네 번째 커밋으로 재배치됩니다. 기존에는 master 브랜치의 2번 커밋에서 뻗어나왔던 foo 브랜치가 이제는 master의 4번 커밋에서 뻗어나오게 기준점이 이동한 것이지요.

///////////////////////////////////////////////////////////////////////////////////////////////////
tip
브랜치를 재배치하는 과정에서도 충돌이 발생할 수 있습니다. 충돌이 발생한다면 당황하지 말고 앞에서 학습한대로 충돌을 해결하면 됩니다.